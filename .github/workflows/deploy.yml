name: board_api CI/CD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: JDK 17 version setup
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # gradlew 실행 권한 부여 및 빌드
      - name: gradle 실행 권한 부여 및 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: DockerHub 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker 이미지 태그 생성
        run: |
          TAG_NAME=main-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}
          echo "IMAGE_TAG=$TAG_NAME" >> $GITHUB_ENV

      - name: Docker 이미지 빌드
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/board-api:${{ env.IMAGE_TAG }} .

      - name: Docker Hub에 푸시
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/board-api:${{ env.IMAGE_TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: EC2 서버에 SSH로 접속하여 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            sudo docker stop board-api || true
            sudo docker rm board-api || true
            
            # 기존 이미지 삭제
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/board-api:latest || true
            
            # 새 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/board-api:${{ env.IMAGE_TAG }}
            
            # 최신 태그 적용
            sudo docker tag ${{ secrets.DOCKER_USERNAME }}/board-api:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/board-api:latest
            
            # 컨테이너 실행
            sudo docker run -d --name board-api --network board_network -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/board-api:latest