name: board_api CI/CD  # CI/CD 파이프라인의 이름 설정

on:
  push:
    branches:
      - master  # master 브랜치에 푸시가 발생할 때 파이프라인 실행

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}  # build 단계의 output 값 전달

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: JDK 17 version setup
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle 실행 권한 부여 및 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: DockerHub 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker 이미지 태그 생성
        id: set_tag
        run: |
          TAG_NAME=main-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}
          echo "IMAGE_TAG=$TAG_NAME" >> $GITHUB_ENV  # 환경 변수로 저장
          echo "image_tag=$TAG_NAME" >> $GITHUB_OUTPUT  # 최신 방식으로 outputs 저장 (set-output 제거)

      - name: Docker 이미지 빌드
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/board-api:${{ env.IMAGE_TAG }} .

      - name: Docker Hub에 푸시
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/board-api:${{ env.IMAGE_TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}  # build 단계에서 생성된 태그 가져오기

    steps:
      - name: 환경 변수 확인 (디버깅용)
        run: echo "Deploying with IMAGE_TAG=${IMAGE_TAG}"

      - name: EC2 서버에 SSH로 접속하여 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "Deploying Docker image: ${{ secrets.DOCKER_USERNAME }}/board-api:${IMAGE_TAG}"

            sudo docker stop board-api || true
            sudo docker rm board-api || true

            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/board-api:${IMAGE_TAG}

            sudo docker images

            sudo docker tag ${{ secrets.DOCKER_USERNAME }}/board-api:${IMAGE_TAG} ${{ secrets.DOCKER_USERNAME }}/board-api:latest

            sudo docker images

            sudo docker run -d --name board-api --network board_network -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/board-api:latest
